01: package kr.co.infopub.chapter.s101;
02: public class OddMagicSquare {
03: 	private int [][] magic; // 2차원 배열 선언
04: 	private int n;          // 마방진 크기 n X n
05: 
06: 	public int[][] getMagic() {
07: 		return magic;
08: 	}
09: 	public OddMagicSquare(int n) {
10: 		magic=new int[n][n]; // 2차원 배열 생성, 초기화
11: 		this.n=n;            // 마방진 크기 결정
12: 	}
13: 	public OddMagicSquare( ) {
14: 		this(3);    // 생성자 오버로딩 - OddMagicSquare(int n)을 이용
15: 	}
16: 	public void make( ){   // 홀수 마방진 만들기
17: 		int x=0;           // 가장 윗줄
18: 		int y=n/2;         // 중앙
19: 		for (int i = 1; i <= n*n ; i++) {
20: 			int temX=x;    // 옮기기전 위치 저장
21: 			int temY=y;    
22: 			System.out.printf("(%d,%d)\t",x,y);
23: 			magic[x][y]=i; // 1~nxn 대입
24: 			// 위로 이동
25: 			if( x-1<0 ){ // 윗벽
26: 				x=n-1;
27: 			}else{
28: 				x--;     // 정상 x=x-1;
29: 			}
30: 			// 왼쪽으로 이동
31: 			if( y-1<0 ){ // 왼쪽 벽
32: 				y=n-1;
33: 			}else{
34: 				y--;     // 정상 y=y-1;
35: 			}
36: 			if(magic[x][y]!=0){ // 이미 존재
37: 				x=temX+1;  // x원위치+1
38: 				y=temY;    // y원위치
39: 			}
40: 		}//for
41: 	}
42: 	public void print(){
43: 		System.out.println();
44: 		for (int i = 0; i < n; i++) {
45: 			for (int j = 0; j < n; j++) {
46: 				System.out.print(magic[i][j]+"\t");
47: 			}
48: 			System.out.println();
49: 		}
50: 	}
51: }//class 
