01: package kr.co.infopub.chapter.s095;
02: import java.util.ArrayList;
03: import java.util.Collections;
04: import java.util.Comparator;
05: import java.util.List;
06: public class CardCase {
07:  // aggregation : CardCase는 Card로 구성된다.
08:  private List<Card> cards=new ArrayList<Card>();
09:  public CardCase() {
10: 	cards.clear(); // 내용 지우기
11:  }
12:  // List 반환
13:  public List<Card> getCards() { 
14: 	return cards;
15:  }
16:  // List에 저장된 Card의 개수
17:  public int count(){ 
18: 	return cards.size(); // 저장된 Card 개수
19:  }
20:  // List의 index번째 Card
21:  public Card getCard(int index){
22: 	return cards.get(index);  // index번째 Card
23:  }
24:  // 서로 다른 카드 20장 만들기
25:  public void make(){
26: 	cards.clear(); // 내용 지우기
27: 	int suit=CardUtil.SUIT.length; // 0~3
28: 	int valu=CardUtil.VALU.length; // 0~12
29: 	int count=0;
30: 	//서로 다른 20개의 카드를 만든다.
31: 	while(count!=valu*suit){    // 20장이 될때까지
32: 		Card c=new Card();      // 임의의 카드를 만든다
33: 		if(!cards.contains(c)){ // contains -> equals()를 이용해 비교
34: 			cards.add(c);       // 같은 객체가 아니라면 저장
35: 			count++;
36: 		}
37: 	}
38:  }
39:  public void shuffle(){
40: 	Collections.shuffle(cards); // 카드 섞기
41:  }
42:  public void print(){
43: 	int valu=CardUtil.VALU.length;
44: 	for (int i = 0; i < cards.size(); i++) {
45: 		Card c=cards.get(i);
46: 		System.out.printf("%s ",c.toString());
47: 		if((i+1)%valu==0){
48: 			System.out.println();
49: 		}
50: 	}
51:  }
52:  // CardComp 클래스가 없다.
53:  public void sort(){
54: 	Comparator<Card> cmp=new Comparator<Card>() {
55: 		@Override
56: 		public int compare (Card c1, Card c2) {
57: 			return c1.getCardVal().compareTo(c2.getCardVal());
58: 		}
59: 	};
60: 	cards.sort(cmp); 
61:  }
62:  // CardRomp 클래스가 없다.
63:  public void rsort(){
64: 	// 익명 -anonymous 
65: 	cards.sort(new Comparator<Card>() {
66: 		@Override
67: 		public int compare (Card c1, Card c2) {
68: 			return - c1.getCardVal().compareTo(c2.getCardVal());
69: 		}
70: 	});
71: }
72:  // sort를 rambda로 구현
73:  public void rambdasort(){
74: 	cards.sort((c1, c2) ->{return c1.getCardVal().compareTo(c2.getCardVal());});
75:  }
76:  public void rambdasort2(){
77: 	cards.sort(Comparator.comparing(Card::getCardVal)); // comparing
78:  }
79:  public void rambdasort3(){
80: 	cards.sort(Card::compareCard);  // static 
81:  }
82:  // rsort를 rambda로 구현
83:  public void rambdarsort(){
84: 	cards.sort(
85: 	(c1, c2) ->{return - c1.getCardVal().compareTo(c2.getCardVal());});
86:  }
87:  public void rambdarsort2(){
88: 	Comparator<Card> mycard = (c1, c2) ->{return c1.getCardVal().compareTo(c2.getCardVal());};
89: 	cards.sort( mycard.reversed() );
90:  }
91:  public void rambdarsort3(){
92: 	cards.sort(Card::compareRCard);  //static 
93:  }
94: }
